・Java
オブジェクト指向プログラミング言語
現在は Oracle(オラクル)が開発している

プラットフォームに依存せずに開発・動作する
異なるハードウェアで同じ 処理

・JRE と JDK
Java Runtime Enviroment : Javaを動かすための環境
                          Javaアプリの実行環境
Java Development Kit : Javaプログラムの開発環境のためのソフトウェア

JavaはJDKが必要

・JVM (Java仮想マシン)
Java Virtual Machine : Javaを動かすためのソフトウェア
                       Javaのソースコードを変換したバイナリファイルを、JVMで上で動作させる

・Javaコンパイラ
プログラムソースコードをコンピュータが理解できるコードに変換することをコンパイルという
コンパイルするための翻訳ソフトウェアをコンパイラという

・シンタックスエラー
文法エラー

・コンパイルエラー
; がないと

・コーディング規約
予約語
命名規則
基本構文
設計に関する定義

・予約語一覧
項目 意味
public    外部からアクセス可能
class     クラス名の前に定義
static    インスタンスというものを作成しなくても、外部からアクセス可能
void       戻り値(結果)を返さない
main       プログラム実行で最初に処理されるメソッド名
String[]   String型の配列という型
args       引数名

{} 開始/終了ブロック

・メインメソッド
アプリ起動時に最初に実行される必須なメソッド
public static void main(String[] args){
    ※ １文字でも間違えるとメインメソッドにならない
}
・システムメソッド
Systemクラスに用意されたメソッド
単語を .(ドット)で区切るのはオブジェクト指向言語の基本
System.out.print("xxxxx");

・コメントアウト<>コメントイン
・フォーマット
プログラムソースを整形すること インデントをそろえるとか
Shift + Alt + F

・パッケージ : グループみたいなもの どこに所属しているか
Javaクラスファイルを機能ごとに分類する仕組み
package パッケージ名

省略すると デフォルトパッケージ(src直下)

自分以外のパッケージを使いたいとき import
import パッケージ名. クラス名
クイックフィックス

・変数 : データ型を付ける
命名規則：半角英数字
         大文字・小文字は区別
         スネーク型とキャメル型 (単語も区切りを xx_ac / xxAc)
         先頭文字に数字は利用できない

指定したデータ型と違うデータ型は代入できない

void 

・定数 const

・演算子
+ - * / %

・２項演算
answer = 1 + 2;
answer = answer + 3

・複合演算
answer += 1;
文字列でもできる(連結)

・キャスト
違うデータ型の計算の時にデータ型を明示する
int num = 5;
float flo = 1.0f;
int answer = num + (int)flo;
自動キャストしてくれたりもする

String + int 連結

・単項演算
++ インクリメント 変数を1増加 a++ 
-- デクリメント 変数を1減少 a--
System.out.println(amount++ + amount++);
この計算は「(10 + 1) + 10」となり2番目の amount++ が演算される前に足し算
→ 21

System.out.println(++amount + ++amount);
この計算は「(10 + 1) + (11 + 1)」となり1、2番目の ++amount が演算されて足し算
→ 23

・オーバーフロー
演算処理で int型の範囲外になると正しくない値になること
※ プログラム自体は処理されてしまう
→ キャストで計算
int型より大きな整数を扱えるlong型でキャスト
元からlong型にする

真偽値	boolean	1ビット	真偽値,falseまたはtrue
文字型	char	16ビット	Unicode文字 ¥u0000～¥uFFFF

整数型	
byte	8ビット	-128～127
short	16ビット	-32768～32767
int	    32ビット	-2147483648～2147483647
long	64ビット	-9223372036854775808～9223372036854775807

浮動小数型	
float	32ビット	単精度浮動小数点数
double	64ビット	倍精度浮動小数点数

・ランタイムエラー
数値を０で割ると
※ コンパイルエラーにはならない